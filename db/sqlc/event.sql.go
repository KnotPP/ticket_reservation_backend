// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: event.sql

package db

import (
	"context"

	"github.com/shopspring/decimal"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO
    events (organizer_id, name, ticket_quota, price)
VALUES
    ($1, $2, $3, $4) RETURNING id, organizer_id, name, ticket_quota, price, created_at, updated_at
`

type CreateEventParams struct {
	OrganizerID int32           `json:"organizer_id"`
	Name        string          `json:"name"`
	TicketQuota int32           `json:"ticket_quota"`
	Price       decimal.Decimal `json:"price"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.OrganizerID,
		arg.Name,
		arg.TicketQuota,
		arg.Price,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.OrganizerID,
		&i.Name,
		&i.TicketQuota,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deductTicketQuota = `-- name: DeductTicketQuota :one
UPDATE events
SET ticket_quota = ticket_quota - $1
WHERE id = $2
RETURNING id, organizer_id, name, ticket_quota, price, created_at, updated_at
`

type DeductTicketQuotaParams struct {
	Amount  int32 `json:"amount"`
	EventID int32 `json:"event_id"`
}

func (q *Queries) DeductTicketQuota(ctx context.Context, arg DeductTicketQuotaParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, deductTicketQuota, arg.Amount, arg.EventID)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.OrganizerID,
		&i.Name,
		&i.TicketQuota,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events 
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT id, organizer_id, name, ticket_quota, price, created_at, updated_at FROM events 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEvent(ctx context.Context, id int32) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.OrganizerID,
		&i.Name,
		&i.TicketQuota,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, organizer_id, name, ticket_quota, price, created_at, updated_at FROM events
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListEventsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.OrganizerID,
			&i.Name,
			&i.TicketQuota,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
SET ticket_quota = $2
WHERE id = $1
RETURNING id, organizer_id, name, ticket_quota, price, created_at, updated_at
`

type UpdateEventParams struct {
	ID          int32 `json:"id"`
	TicketQuota int32 `json:"ticket_quota"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, updateEvent, arg.ID, arg.TicketQuota)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.OrganizerID,
		&i.Name,
		&i.TicketQuota,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
